# ------------------------------------------------------------------------------
# Builds a SDL framework for the iOS
# Copyright (c) 2011 Andrey Nesterov
# See LICENSE for licensing information
# ------------------------------------------------------------------------------
#
# Creates a pseudo-framework which contains a universal library that can be used
# on a iOS and in the iOS simulator
#
# ------------------------------------------------------------------------------
#
# Depends on:
#  hg
#
# ------------------------------------------------------------------------------
#
# To configure the script, define:
#   Conf      	   configuration (:release or :debug)
#   Arch      	   architecture for the device's library (e.g. :arm6)
#   SDK       	   version number of the iOS SDK (e.g. "4.3")
#   LibVersion     version number of the library wich will be installed
#                  (e.g. {:SDL = "1.3", :SDL_image = "1.2.10"})
#
# ------------------------------------------------------------------------------

# --- Configure ----------------------------------------------------------------
module Configure
	Conf = :release
	Arch = :armv7
	SDK = "5.0"
	LibVersion = {:SDL => "1.3", :SDL_image => "1.2.10"}
end

# --- Constants ----------------------------------------------------------------
module Global
	RootDir = Dir.pwd
	TemplatesDir = "#{RootDir}/templates"
	SourcesDir = "#{RootDir}/src"
	BuildDir = "#{RootDir}/build"
end

# --- Common -------------------------------------------------------------------
module Builder
	def get_sources(from, to)
		return if FileTest.exists? to
		yield from, to
	end

	def build_library(project, dest, target, conf, sdk, arch)
		dest = library_bundle_path(dest, conf, sdk, arch)
		sdk, arch = compute_platform(sdk, arch)
		conf = configuration(conf)

		args = []
		args << %{-sdk "#{sdk}"}
		args << %{-configuration "#{conf}"}
		args << %{-target "#{target}"}
		args << %{-arch "#{arch.to_str}"}
		args << %{TARGETED_DEVICE_FAMILY="1,2"}
		args << %{BUILT_PRODUCTS_DIR="build"}
		args << %{CONFIGURATION_BUILD_DIR="#{dest}"}
		args << %{CONFIGURATION_TEMP_DIR="#{dest}.build"}
		cmd = "xcodebuild #{args.join " "}"
		puts cmd

		refresh_dir dest
		cd File.dirname project
		`#{cmd}`
	end

	def build_framework_library(frameworkLib, deviceLib, simulatorLib)
		cmd = %{lipo -create #{deviceLib} #{simulatorLib} -o #{frameworkLib}}
		puts cmd

		refresh_dir File.dirname frameworkLib
		`#{cmd}`
	end

	def build_framework(name, version, identifier, dest, headers, project, target, conf, sdk, arch)
		libFileName = "lib#{name}.a";
		libFilePath = "#{dest}/universal-#{conf}/#{libFileName}"

		build_library(project, dest, target, conf, sdk, arch);
		build_library(project, dest, target, conf, sdk, :i386);

		build_framework_library(
			libFilePath, 
			"#{library_bundle_path(dest, conf, sdk, arch)}/#{libFileName}",
			"#{library_bundle_path(dest, conf, sdk, :i386)}/#{libFileName}"
		)
		create_framework(name, version, identifier, dest, headers, libFilePath)
	end

	def create_framework(name, version, identifier, dest, headers, lib)
		frameworkVersion = "A"
		frameworkBundle = framework_bundle_path(dest, name)

		# creating framework's directories	
		refresh_dir frameworkBundle
		mkdir "#{frameworkBundle}/Versions"
		mkdir "#{frameworkBundle}/Versions/#{frameworkVersion}"
		mkdir "#{frameworkBundle}/Versions/#{frameworkVersion}/Resources"
		mkdir "#{frameworkBundle}/Versions/#{frameworkVersion}/Headers"
		mkdir "#{frameworkBundle}/Versions/#{frameworkVersion}/Documentation"

		# creating framework's symlinks
		`ln -s "#{frameworkVersion}" "#{frameworkBundle}/Versions/Current"`
		`ln -s "Versions/Current/Headers" "#{frameworkBundle}/Headers"`
		`ln -s "Versions/Current/Resources" "#{frameworkBundle}/Resources"`
		`ln -s "Versions/Current/Documentation" "#{frameworkBundle}/Documentation"`
		`ln -s "Versions/Current/#{File.basename lib}" "#{frameworkBundle}/#{name}"`

		# copying lib
		cp lib, "#{frameworkBundle}/Versions/#{frameworkVersion}"

		# copying includes
		FileList["#{headers}/*.h"].each do |source|
			cp source, "#{frameworkBundle}/Headers"
		end

		# creating plist
		File.open("#{frameworkBundle}/Resources/Info.plist", "w") do |f|
			f.puts '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">'
			f.puts "<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>#{name}</string>
	<key>CFBundleIdentifier</key>
	<string>#{identifier}</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundlePackageType</key>
	<string>FMWK</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>#{version}</string>
</dict>
</plist>"
		end
	end

	def library_bundle_path(path, conf, sdk, arch)
		sdk, arch = compute_platform(sdk, arch)
		"#{path}/#{sdk}-#{arch}-#{conf}"
	end

	def framework_bundle_path(path, name)
		"#{path}/#{name}.framework"
	end

	def configuration(conf)
		conf.to_s
	end

	def compute_platform(sdk, arch)
		return [sdk, arch] if arch.class == String
		[arch == :i386 ? "iphonesimulator" + sdk : "iphoneos" + sdk, arch.to_s]
	end

	def refresh_dir(path)
		rm_rf path if FileTest.exists? path
		mkdir_p path
	end

	private :configuration, :compute_platform, :refresh_dir
end

# --- InstanceBuilder ----------------------------------------------------------
class InstanceBuilder
	class Instance
		include Builder
	end

	class << self
		attr_accessor :instance
	end

	def self.build(conf, sdk, arch)
		download
		unpack
		build_framework conf, sdk, arch
	end

	def self.version
		Configure::LibVersion[self.to_s.to_sym]
	end

	def self.message(text)
		tailSize = 75 - text.length;
		puts "--- #{text} #{'-' * (tailSize < 0 ? 0 : tailSize)}"
	end
end

# --- SDL ----------------------------------------------------------------------
class SDL < InstanceBuilder
	self.instance = Instance.new

	ProjFile = "SDLiPhoneOS.xcodeproj"; 
	SourcesDir = (FileTest.exists? ProjFile) ? "#{Global::RootDir}/../.." : "#{Global::SourcesDir}/SDL"
	BuildDir = "#{Global::BuildDir}/sdl"
	Conf = {:release => "Release", :debug => "Debug"}

	def self.download
		message "Downloading SDL"
		self.instance.get_sources("http://hg.libsdl.org/SDL", SourcesDir) {|from, to| `hg clone "#{from}" "#{to}"`}
	end

	def self.unpack
		message "Unpacking SDL"
	end
	
	def self.build_framework(conf, sdk, arch)
		message "Building SDL"
		self.instance.build_framework(
			"SDL",
			self.version,
			"org.libsdl",
			BuildDir, 
			"#{SourcesDir}/include",
			"#{SourcesDir}/Xcode-iPhoneOS/SDL/#{ProjFile}",
			"libSDL",
			conf,
			sdk,
			arch
		)
	end

	def instance.configuration(conf)
		Conf[conf]
	end
end

# --- SDL_image ----------------------------------------------------------------
class SDL_image < InstanceBuilder
	self.instance = Instance.new

	SourcesDir = "#{Global::SourcesDir}/sdl_image"
	BuildDir = "#{Global::BuildDir}/sdl_image"
	Conf = {:release => "Release", :debug => "Debug"}
 
	 def self.download
    message "Downloading SDL_image"
    self.instance.get_sources("http://hg.libsdl.org/SDL_image", SourcesDir) {|from, to| `hg clone "#{from}" "#{to}"`}
  end

	def self.unpack
		message "Unpacking SDL_image"
	end
	
	def self.build_framework(conf, sdk, arch)
		message "Building SDL_image"
		self.instance.build_framework(
			"SDL_image",
			self.version,
			"org.libsdl",
			BuildDir, 
			"#{SourcesDir}",
			"#{SourcesDir}/Xcode_iPhone/SDL_image.xcodeproj",
			"libSDL_image",
			conf,
			sdk,
			arch
		)
	end

	def self.build(conf, sdk, arch)
		message "Creating a temporary link on the SDL.framework for successful build of the SDL_image"
		link = "#{SourcesDir}/Xcode_iPhone"
		rm link if FileTest.exists? link
		`ln -s "#{SDL::BuildDir}/SDL.framework" "#{link}"`
		super
		rm link
	end

	def instance.configuration(conf)
		Conf[conf]
	end
end

# --- Tasks --------------------------------------------------------------------
task :default => [:sdl] do
end

task :sdl do
	SDL.build Configure::Conf, Configure::SDK, Configure::Arch
end

task :sdl_image do
	SDL_image.build Configure::Conf, Configure::SDK, Configure::Arch
end

task :all do
	["SDL", "SDL_image"].each do |classname|
		Object.const_get(classname).build Configure::Conf, Configure::SDK, Configure::Arch
	end
end

